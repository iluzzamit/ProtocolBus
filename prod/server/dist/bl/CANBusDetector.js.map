{"version":3,"file":"CANBusDetector.js","sourceRoot":"","sources":["../../src/bl/CANBusDetector.ts"],"names":[],"mappings":";;AAAA,8DAA2D;AAE3D,2CAA6C;AAC7C,kEAA+D;AAS/D,MAAqB,cAAc;IAAnC;QACE,YAAO,GAAmC,IAAI,GAAG,EAAE,CAAC;IAwBtD,CAAC;IAtBC,MAAM,CAAC,UAAsB;QAC3B,MAAM,eAAe,GAAoB,IAAI,iCAAe,EAAE,CAAC;QAC/D,MAAM,OAAO,GAAsB,IAAI,qCAAiB,CAAC,UAAU,CAAC,CAAA;QACpE,MAAM,MAAM,GAAsB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QAE1E,IAAI,MAAM,EAAE;YACV,MAAM,OAAO,GAAgB,kBAAU,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;YAErE,IAAI,OAAO,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,GAAG,GAAG,EAAE;gBAC9C,eAAe,CAAC,IAAI,GAAG,KAAK,CAAC;aAC9B;YAAA,CAAC;YACF,IAAI,OAAO,CAAC,UAAU,CAAC,GAAG,KAAK,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE;gBACpD,eAAe,CAAC,MAAM,GAAG,KAAK,CAAC;aAChC;YACD,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBAC1C,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC;oBAAE,eAAe,CAAC,IAAI,GAAG,KAAK,CAAC;YACtD,CAAC,CAAC,CAAA;SACH;QACD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,EAAE,IAAI,qCAAiB,CAAC,UAAU,CAAC,CAAC,CAAC;QAE3E,OAAO,CAAC,eAAe,EAAC,OAAO,CAAC,CAAC;IACnC,CAAC;CACF;AAzBD,iCAyBC","sourcesContent":["import { DetectionResult } from \"../model/DetectionResult\";\r\nimport { CANMessage } from \"../model/CANMessage\";\r\nimport { arrayToSet } from \"../common/utils\";\r\nimport { HistoryCANMessage } from \"../model/HistoryCANMessage\";\r\n\r\n/*\r\n  CANDetector gets a CANMessage from the father component,\r\n  and have the abillity to detect if there any\r\n  issues with the recived message.\r\n*/\r\n\r\n\r\nexport default class CANBusDetector {\r\n  history: Map<string, HistoryCANMessage> = new Map();\r\n\r\n  detect(canMessage: CANMessage): [DetectionResult, HistoryCANMessage] {\r\n    const detectionResult: DetectionResult = new DetectionResult();\r\n    const current: HistoryCANMessage = new HistoryCANMessage(canMessage)\r\n    const result: HistoryCANMessage = this.history.get(canMessage.identifier);\r\n\r\n    if (result) {\r\n      const dataMap: Set<string> = arrayToSet(result.canMessage.dataField);\r\n\r\n      if (current.timestamp - result.timestamp < 100) {\r\n        detectionResult.rate = false;\r\n      };\r\n      if (current.canMessage.dlc === result.canMessage.dlc) {\r\n        detectionResult.length = false;\r\n      }\r\n      current.canMessage.dataField.forEach(byte => {\r\n        if (dataMap.has(byte)) detectionResult.data = false;\r\n      })\r\n    }\r\n    this.history.set(canMessage.identifier, new HistoryCANMessage(canMessage));\r\n\r\n    return [detectionResult,current];\r\n  }\r\n}"]}