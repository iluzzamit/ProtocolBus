{"version":3,"file":"coder.js","sourceRoot":"","sources":["../../src/utils/coder.ts"],"names":[],"mappings":"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","sourcesContent":["import { CANMessage } from \"../model/Message\";\r\n\r\nexport const toBase = (value, base, fromBase?) => parseInt(value, fromBase || 2).toString(base).toUpperCase();\r\n\r\nconst splice = (str: string, numOfChars: number, base?): any[] => {\r\n  const slice = toBase(str.slice(0, numOfChars), base || 16);\r\n  const rest = str.substring(numOfChars, str.length);\r\n  return [slice, rest];\r\n};\r\n\r\nexport function canParser(frame: string): CANMessage {\r\n  const message = new CANMessage();\r\n  let tempByte;\r\n\r\n  [message.sof, frame] = splice(frame, 1);\r\n  [message.identifier, frame] = splice(frame, 11);\r\n  [message.rtr, frame] = splice(frame, 1);\r\n  [message.ide, frame] = splice(frame, 1);\r\n  [message.r, frame] = splice(frame, 1);\r\n  [message.dlc, frame]= splice(frame, 4, 10);\r\n\r\n  for (let i = 0; i < Number(message.dlc); i++) {\r\n    [tempByte, frame] = splice(frame, 8);\r\n    message.dataField.push(tempByte);\r\n  }\r\n\r\n  [message.checkSum, frame] = splice(frame, 15);\r\n  [message.del, frame] = splice(frame, 1);\r\n  [message.ack.ack, frame] = splice(frame, 1);\r\n  [message.ack.del, frame] = splice(frame, 1);\r\n  [message.eof, frame] = splice(frame, 7);\r\n  return message;\r\n}\r\n\r\nexport function canMapper(message: CANMessage): string {\r\n  let frame: string = '';\r\n\r\n  frame += toBase(message.sof, 2, 16) + ' ';\r\n  frame += leadingZeros(toBase(message.identifier, 2, 16), 11) + ' ';\r\n  frame += toBase(message.rtr, 2, 16) + ' ';\r\n  frame += toBase(message.ide, 2, 16) + ' ';\r\n  frame += toBase(message.r, 2, 16) + ' ';\r\n  frame += leadingZeros(toBase(message.dlc, 2, 10), 4) + ' ';\r\n  frame += message.dataField.reduce((prev,curr) => prev += leadingZeros(toBase(curr,2, 16),8) + ' ' ,'') + ' ';\r\n  frame += leadingZeros(toBase(message.checkSum, 2, 16), 15) + ' ';\r\n  frame += toBase(message.del, 2, 16) + ' ';\r\n  frame += toBase(message.ack.ack, 2, 16) + ' ';\r\n  frame += toBase(message.ack.del, 2, 16) + ' ';\r\n  frame += leadingZeros(toBase(message.eof, 2, 16), 7) + ' ';\r\n\r\n  return frame;\r\n}\r\n\r\nfunction leadingZeros(str, size) {\r\n  while (str.length < (size || 2)) {str = \"0\" + str}\r\n  return str;\r\n}"]}