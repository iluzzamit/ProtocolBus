[{"C:\\Users\\Amit Iluz\\Desktop\\projects\\ProtocolsParser\\client\\src\\index.tsx":"1","C:\\Users\\Amit Iluz\\Desktop\\projects\\ProtocolsParser\\client\\src\\components\\App.tsx":"2","C:\\Users\\Amit Iluz\\Desktop\\projects\\ProtocolsParser\\client\\src\\components\\Header.tsx":"3","C:\\Users\\Amit Iluz\\Desktop\\projects\\ProtocolsParser\\client\\src\\components\\Style.tsx":"4","C:\\Users\\Amit Iluz\\Desktop\\projects\\ProtocolsParser\\client\\src\\components\\Body.tsx":"5","C:\\Users\\Amit Iluz\\Desktop\\projects\\ProtocolsParser\\client\\src\\components\\DataTable.tsx":"6","C:\\Users\\Amit Iluz\\Desktop\\projects\\ProtocolsParser\\client\\src\\api\\api.ts":"7","C:\\Users\\Amit Iluz\\Desktop\\projects\\ProtocolsParser\\client\\src\\common\\utils.ts":"8","C:\\Users\\Amit Iluz\\Desktop\\projects\\ProtocolsParser\\client\\src\\common\\tooltip.tsx":"9"},{"size":230,"mtime":1607738417047,"results":"10","hashOfConfig":"11"},{"size":323,"mtime":1607723774274,"results":"12","hashOfConfig":"11"},{"size":290,"mtime":1607724174165,"results":"13","hashOfConfig":"11"},{"size":2534,"mtime":1607735818366,"results":"14","hashOfConfig":"11"},{"size":2910,"mtime":1607735920622,"results":"15","hashOfConfig":"11"},{"size":2741,"mtime":1607741264119,"results":"16","hashOfConfig":"11"},{"size":598,"mtime":1607735742968,"results":"17","hashOfConfig":"11"},{"size":112,"mtime":1607730557842,"results":"18","hashOfConfig":"11"},{"size":435,"mtime":1607732777613,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"an3g3i",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"C:\\Users\\Amit Iluz\\Desktop\\projects\\ProtocolsParser\\client\\src\\index.tsx",[],["41","42"],"C:\\Users\\Amit Iluz\\Desktop\\projects\\ProtocolsParser\\client\\src\\components\\App.tsx",[],"C:\\Users\\Amit Iluz\\Desktop\\projects\\ProtocolsParser\\client\\src\\components\\Header.tsx",[],"C:\\Users\\Amit Iluz\\Desktop\\projects\\ProtocolsParser\\client\\src\\components\\Style.tsx",[],"C:\\Users\\Amit Iluz\\Desktop\\projects\\ProtocolsParser\\client\\src\\components\\Body.tsx",[],"C:\\Users\\Amit Iluz\\Desktop\\projects\\ProtocolsParser\\client\\src\\components\\DataTable.tsx",["43"],"import { Fade, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { CANMessage, Data, DetectionResult } from '../model/Data';\r\nimport { toCamelCase } from '../common/utils';\r\nimport Tooltip from '../common/tooltip';\r\nimport io from 'socket.io-client';\r\n\r\nexport default function DataTable({ data }: { data: any[] }) {\r\n  const [currentData, setCurrentData]: any = React.useState(data || []);\r\n\r\n  React.useEffect(() => {\r\n    setCurrentData(data);\r\n  }, [data]);\r\n\r\n  React.useEffect(() => {\r\n    initialSocket();\r\n  }, []);\r\n\r\n  const initialSocket = () => {\r\n    const socket = io('http://localhost:8080/');\r\n\r\n    socket.on('message', (newData: any) => {\r\n      setCurrentData(newData);\r\n    });\r\n  }\r\n\r\n  const isValid = (detectionResult: DetectionResult) => {\r\n    return detectionResult.data && detectionResult.length && detectionResult.rate ? 'Valid' : 'Invalid'\r\n  }\r\n\r\n  return (\r\n    <TableContainer component={Paper} style={{ height: '600px' }} className='scroll'>\r\n      <Fade in={data.length !== 0}>\r\n        <Table aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell><Typography className='title-text'>ID</Typography></TableCell>\r\n              <TableCell><Typography className='title-text'>Date</Typography></TableCell>\r\n              <TableCell><Typography className='title-text'>Frame</Typography></TableCell>\r\n              <TableCell><Typography className='title-text'>Status</Typography></TableCell>\r\n              <TableCell><Typography className='title-text'>Reason</Typography></TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {currentData.map((row: Data) => (\r\n              <Fade in={true} key={row.uniqueId}>\r\n                <TableRow>\r\n                  <TableCell><Typography className='value-text'>{row.uniqueId}</Typography></TableCell>\r\n                  <TableCell><Typography className='value-text'>{row.timestamp.split('T').join(' ').split('Z')}</Typography></TableCell>\r\n                  <TableCell><Typography className='value-text'><Tooltip value={row.frame} /></Typography></TableCell>\r\n                  <TableCell><Typography className='value-text'>{isValid(row.detectionResults)}</Typography></TableCell>\r\n                  <TableCell><Typography className='value-text'>{Object.entries(row.detectionResults).map(result => {\r\n                    return !result[1] ? toCamelCase(result[0]) + ' ' : null\r\n                  })}</Typography></TableCell>\r\n                </TableRow>\r\n              </Fade>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </Fade>\r\n    </TableContainer>\r\n  )\r\n}","C:\\Users\\Amit Iluz\\Desktop\\projects\\ProtocolsParser\\client\\src\\api\\api.ts",[],"C:\\Users\\Amit Iluz\\Desktop\\projects\\ProtocolsParser\\client\\src\\common\\utils.ts",[],"C:\\Users\\Amit Iluz\\Desktop\\projects\\ProtocolsParser\\client\\src\\common\\tooltip.tsx",[],["44","45"],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":3,"column":10,"nodeType":"52","messageId":"53","endLine":3,"endColumn":20},{"ruleId":"46","replacedBy":"54"},{"ruleId":"48","replacedBy":"55"},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"@typescript-eslint/no-unused-vars","'CANMessage' is defined but never used.","Identifier","unusedVar",["56"],["57"],"no-global-assign","no-unsafe-negation"]